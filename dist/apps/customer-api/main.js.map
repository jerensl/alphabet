{"version":3,"file":"main.js","mappings":"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","sources":["webpack://alphabet/./apps/customer-api/src/app.module.ts","webpack://alphabet/./apps/customer-api/src/message/message.controller.ts","webpack://alphabet/./apps/customer-api/src/message/message.entity.ts","webpack://alphabet/./apps/customer-api/src/message/message.module.ts","webpack://alphabet/./apps/customer-api/src/message/message.service.ts","webpack://alphabet/external commonjs \"@nestjs/axios\"","webpack://alphabet/external commonjs \"@nestjs/common\"","webpack://alphabet/external commonjs \"@nestjs/core\"","webpack://alphabet/external commonjs \"@nestjs/platform-fastify\"","webpack://alphabet/external commonjs \"class-validator\"","webpack://alphabet/external commonjs \"rxjs\"","webpack://alphabet/external commonjs \"tokenizers\"","webpack://alphabet/external commonjs \"tslib\"","webpack://alphabet/external node-commonjs \"util\"","webpack://alphabet/webpack/bootstrap","webpack://alphabet/./apps/customer-api/src/main.ts"],"sourcesContent":["import { Module } from '@nestjs/common';\nimport { MessageModule } from './message/message.module';\n\n@Module({\n  imports: [MessageModule],\n})\nexport class AppModule {}\n","import { Body, Controller, Get, Post } from '@nestjs/common';\n\nimport { MessageService } from './message.service';\nimport { MessageDTO } from './message.entity';\n\n@Controller('message')\nexport class MessageController {\n  constructor(private readonly messageService: MessageService) {}\n\n  @Post()\n  async message(@Body() message: MessageDTO) {\n    const dataEncoded = await this.messageService.encoded(message.message);\n    const dataPrediction = await this.messageService.prediction(dataEncoded);\n    const category = this.messageService.getCategory(\n      dataPrediction.predictions\n    );\n    this.messageService.addData(\n      message.message,\n      category,\n      dataPrediction.predictions\n    );\n  }\n\n  @Get()\n  getMessage() {\n    return this.messageService.getAllMessage();\n  }\n}\n","import { IsNotEmpty } from 'class-validator';\n\nexport interface Messaging {\n  message: string;\n  prediction: Array<number>;\n  category: string;\n}\n\ninterface MessageData {\n  input_ids: Array<number>;\n  attention_mask: Array<number>;\n}\n\nexport interface MessageEncoding {\n  instances: Array<MessageData>;\n}\n\nexport interface Predictions {\n  predictions: Array<number>;\n}\n\nexport class MessageDTO {\n  @IsNotEmpty()\n  message: string;\n}\n","import { HttpModule } from '@nestjs/axios';\nimport { Module } from '@nestjs/common';\nimport { MessageController } from './message.controller';\nimport { MessageService } from './message.service';\n\n@Module({\n  imports: [\n    HttpModule.register({\n      timeout: 10000,\n    }),\n    MessageModule,\n  ],\n  controllers: [MessageController],\n  providers: [MessageService],\n})\nexport class MessageModule {}\n","import { HttpService } from '@nestjs/axios';\nimport { Injectable, Logger } from '@nestjs/common';\nimport { BertWordPieceTokenizer } from 'tokenizers';\nimport { Messaging, MessageEncoding, Predictions } from './message.entity';\nimport { promisify } from 'util';\nimport { lastValueFrom, map } from 'rxjs';\n\n@Injectable()\nexport class MessageService {\n  private readonly messaging: Messaging[] = [];\n  constructor(private httpService: HttpService) {}\n  private readonly logger = new Logger();\n\n  getAllMessage(): Messaging[] {\n    return this.messaging;\n  }\n\n  async encoded(message: string): Promise<MessageEncoding> {\n    const tokenizer = await BertWordPieceTokenizer.fromOptions({\n      vocabFile: './vocabulary.txt',\n    });\n\n    const encode = promisify(tokenizer.encode.bind(tokenizer));\n\n    const token = await encode(message);\n\n    const input_ids = token.getIds();\n    const attention_mask = token.getAttentionMask();\n\n    while (input_ids.length < 256) {\n      attention_mask.push(0);\n      input_ids.push(0);\n    }\n\n    const data = {\n      instances: [\n        {\n          input_ids: input_ids,\n          attention_mask: attention_mask,\n        },\n      ],\n    };\n\n    return data;\n  }\n\n  async prediction(dataEncoded: MessageEncoding): Promise<Predictions> {\n    const responseData = await lastValueFrom(\n      this.httpService\n        .post(process.env.SENTIMENT_MODEL_URL, JSON.stringify(dataEncoded))\n        .pipe(\n          map((response) => {\n            return response.data;\n          })\n        )\n    );\n\n    return responseData;\n  }\n\n  getCategory(prediction: Array<number>): string {\n    const max = Math.max(...prediction);\n\n    const index = prediction.indexOf(max);\n\n    if (index === 1) {\n      return 'hate speech';\n    } else if (index === 2) {\n      return 'abusive';\n    }\n\n    return 'normal';\n  }\n\n  addData(message: string, category: string, prediction: Array<number>) {\n    this.messaging.push({\n      message: message,\n      prediction: prediction,\n      category: category,\n    });\n  }\n}\n","module.exports = require(\"@nestjs/axios\");","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/platform-fastify\");","module.exports = require(\"class-validator\");","module.exports = require(\"rxjs\");","module.exports = require(\"tokenizers\");","module.exports = require(\"tslib\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import {\n  FastifyAdapter,\n  NestFastifyApplication,\n} from '@nestjs/platform-fastify';\n\nimport { Logger, ValidationPipe } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\n\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create<NestFastifyApplication>(\n    AppModule,\n    new FastifyAdapter({\n      logger: true,\n    })\n  );\n\n  app.useGlobalPipes(new ValidationPipe());\n  const globalPrefix = 'api';\n  app.setGlobalPrefix(globalPrefix);\n  const port = process.env.PORT || 3333;\n  await app.listen(port, '0.0.0.0');\n  Logger.log(\n    `🚀 Application is running on: http://localhost:${port}/${globalPrefix}`\n  );\n}\n\nbootstrap();\n"],"names":[],"sourceRoot":""}